#################################################
## Apply ion::engine libraries
#################################################

rule ApplyIonCompiler TARGET
{
    if ( macosx64 in $(PLATFORM) )
    {
        C.Flags $(TARGET) : C++	: -std=c++11 ;
    }

    if ( linux64 in $(PLATFORM) )
    {
        C.Flags $(TARGET) : C++	: -std=c++11 ;
    }
}

rule ApplyIonIncludes TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp) ;
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion ;
}

rule ApplyIonDefines TARGET
{
	if ( win32 in $(PLATFORM) )
	{
		C.Defines $(TARGET) :
			ION_PLATFORM_WINDOWS
			ION_ENDIAN_LITTLE
			;
	}

    if ( macosx64 in $(PLATFORM) )
    {
        C.Defines $(TARGET) :
            ION_PLATFORM_MACOSX
            ION_ENDIAN_LITTLE
            ;
    }

    if ( linux64 in $(PLATFORM) )
    {
        C.Defines $(TARGET) :
            ION_PLATFORM_LINUX
            ION_ENDIAN_LITTLE
            ;
    }

	if ( dreamcast in $(PLATFORM) )
	{
		C.Defines $(TARGET) :
			ION_PLATFORM_DREAMCAST
			ION_TOOLCHAIN_KOS
			ION_ENDIAN_LITTLE
			;
	}

	ApplyDefaultRenderer $(TARGET) : defines ;
}

rule ApplyIonLib TARGET : LIBNAME
{
	SubInclude bigevilcorp ion $(LIBNAME) : $(LIBNAME) ;
	ApplyIonIncludes $(TARGET) ;
	C.LinkLibraries $(TARGET) : $(LIBNAME) ;
}

rule ApplyIonCore TARGET
{
	ApplyIonLib $(TARGET) : core ;
	ApplyIonLib $(TARGET) : maths ;
	ApplyIonLib $(TARGET) : io ;

	if ( win32 in $(PLATFORM) )
	{
		ApplyWin32SDK $(TARGET) ;
	}

	if ( dreamcast in $(PLATFORM) )
	{
		ApplyKOSSDK $(TARGET) ;
	}
}

rule ApplyIonEditor TARGET
{
	ApplyIonLib $(TARGET) : editor ;
}

rule ApplyIonAudio TARGET
{
	ApplyIonLib $(TARGET) : audio ;

	ApplyWin32SDK $(TARGET) ;
	ApplyXAudio2SDK $(TARGET) ;
}

rule ApplyIonGui TARGET
{
	ApplyIonLib $(TARGET) : gui ;

	ApplyWin32SDK $(TARGET) ;
	ApplyDirectXSDK $(TARGET) ;
	ApplyOgreSDK $(TARGET) ;
	ApplyCEGUISDK $(TARGET) ;
}

rule ApplyIonInput TARGET
{
	ApplyIonLib $(TARGET) : input ;

	if ( win32 in $(PLATFORM) )
	{
		ApplyWin32SDK $(TARGET) ;
		ApplyXInputSDK $(TARGET) ;
	}
}

rule ApplyIonIo TARGET
{
	ApplyIonLib $(TARGET) : io ;
}

rule ApplyIonRenderer TARGET
{
	ApplyIonLib $(TARGET) : renderer ;
	ApplyDefaultRenderer $(TARGET) : sdk link ;
}

rule ApplyDefaultRenderer TARGET : LINK_OPT
{
	if ( win32 in $(PLATFORM) )
	{
		# ApplyRendererImpl $(TARGET) : opengl sdl cggl $(LINK_OPT) ;
		ApplyRendererImpl $(TARGET) : opengl sdl $(LINK_OPT) ;
	}

	if ( macosx64 in $(PLATFORM) )
	{
		ApplyRendererImpl $(TARGET) : opengl sdl $(LINK_OPT) ;
	}

	if ( linux64 in $(PLATFORM) )
	{
		ApplyRendererImpl $(TARGET) : opengl sdl $(LINK_OPT) ;
	}

	if ( dreamcast in $(PLATFORM) )
	{
		ApplyRendererImpl $(TARGET) : opengl glut $(LINK_OPT) ;
	}
}

rule ApplyRendererImpl TARGET : RENDER_IMPL_OPTS
{
	if ( direct3d in $(RENDER_IMPL_OPTS) )
	{
		ApplyIonRendererDirect3D $(TARGET) : $(RENDER_IMPL_OPTS) ;
	}

	if ( opengl in $(RENDER_IMPL_OPTS) )
	{
		ApplyIonRendererOpenGL $(TARGET) : $(RENDER_IMPL_OPTS) ;
	}

	if ( cggl in $(RENDER_IMPL_OPTS) )
	{
		ApplyIonRendererCGGL $(TARGET) : $(RENDER_IMPL_OPTS) ;
	}
	else
	{
		ApplyIonRendererFixed $(TARGET) : $(RENDER_IMPL_OPTS) ;
	}

	if ( glut in $(RENDER_IMPL_OPTS) )
	{
		if ( sdk in $(RENDER_IMPL_OPTS) )
		{
			ApplyGlutSDK $(TARGET) ;
		}
	}

	if ( sdl in $(RENDER_IMPL_OPTS) )
	{
		if ( sdk in $(RENDER_IMPL_OPTS) )
		{
			ApplySDLSDK $(TARGET) ;
		}
	}

	if ( sdlimage in $(RENDER_IMPL_OPTS) )
	{
		if ( sdk in $(RENDER_IMPL_OPTS) )
		{
			ApplySDLImageSDK $(TARGET) ;
		}
	}
}

rule ApplyIonPhysics TARGET
{
	ApplyIonLib $(TARGET) : physics ;

	ApplyBulletSDK $(TARGET) ;
}

rule ApplyIonGameKit TARGET
{
	ApplyIonLib $(TARGET) : gamekit ;
}

rule ApplyIonNetwork TARGET
{
	ApplyIonLib $(TARGET) : network ;
}

#################################################
## Apply API implementations
#################################################
rule ApplyIonRendererDirect3D TARGET : RENDER_IMPL_OPTS
{

}

rule ApplyIonRendererOpenGL TARGET : RENDER_IMPL_OPTS
{
	if ( defines in $(RENDER_IMPL_OPTS) )
	{
		C.Defines $(TARGET) : ION_RENDERER_OPENGL ;
	}

	if ( sdk in $(RENDER_IMPL_OPTS) )
	{
		ApplyIonIncludes $(TARGET) ;
		ApplyOpenGLSDK $(TARGET) ;
	}

	if ( link in $(RENDER_IMPL_OPTS) )
	{
		if ! ( opengl in $(TARGET) )
		{
			SubInclude bigevilcorp ion renderer opengl : opengl ;
			C.LinkLibraries $(TARGET) : opengl ;
		}
	}
}

rule ApplyIonRendererCGGL TARGET : RENDER_IMPL_OPTS
{
	if ( defines in $(RENDER_IMPL_OPTS) )
	{
		C.Defines $(TARGET) : ION_RENDERER_SHADER ;
	}

	if ( sdk in $(RENDER_IMPL_OPTS) )
	{
		ApplyIonIncludes $(TARGET) ;
		ApplyCgSDK $(TARGET) ;
		ApplyGlewSDK $(TARGET) ;
		ApplyGlfwSDK $(TARGET) ;
	}

	if ( link in $(RENDER_IMPL_OPTS) )
	{
		if ! ( cggl in $(TARGET) )
		{
			SubInclude bigevilcorp ion renderer cggl : cggl ;
			C.LinkLibraries $(TARGET) : cggl ;
		}
	}
}

rule ApplyIonRendererFixed TARGET : RENDER_IMPL_OPTS
{
	if ( defines in $(RENDER_IMPL_OPTS) )
	{
		C.Defines $(TARGET) : ION_RENDERER_FIXED ;
	}
}

#################################################
## Apply external SDKs
#################################################
rule ApplyWin32SDK TARGET
{
	C.Defines $(TARGET) : WIN32_LEAN_AND_MEAN VC_EXTRALEAN ;

	local WIN32_LIBS =
		kernel32.lib
		user32.lib
		gdi32.lib
		comdlg32.lib
		advapi32.lib
		shell32.lib
		uuid.lib
		ole32.lib
		delayimp.lib
		Ws2_32.lib
		;

	C.LinkPrebuiltLibraries $(TARGET) : $(WIN32_LIBS) ;
}

rule ApplyXAudio2SDK TARGET
{
	local XAUDIO2_LIBS =
		xaudio2.lib
		;

	C.LinkPrebuiltLibraries $(TARGET) : $(XAUDIO2_LIBS) ;
}

rule ApplyXInputSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(DXSDK_DIR:J=" ")/Include ;
	C.LinkDirectories $(TARGET) : $(DXSDK_DIR:J=" ")/Lib/x86 ;
	C.Defines $(TARGET) : DIRECTINPUT_VERSION=0x0800 ;

	local XINPUT_LIBS =
		xinput.lib
		dinput8.lib
		# DxErr.lib
		dxguid.lib
		;

	C.LinkPrebuiltLibraries $(TARGET) : $(XINPUT_LIBS) ;
}

rule ApplyDirectXSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(DXSDK_DIR:J=" ")/Include ;
	C.LinkDirectories $(TARGET) : $(DXSDK_DIR:J=" ")/Lib/x86 ;

	local DIRECTX_LIBS =
		d3dx9d.lib
		d3d9.lib
		DxErr.lib
		dxguid.lib
		winmm.lib
		;

	C.LinkPrebuiltLibraries $(TARGET) : $(DIRECTX_LIBS) ;
}

rule ApplyOpenGLSDK TARGET
{
	if ( win32 in $(PLATFORM) )
	{
		C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/OpenGL/include ;
		C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/OpenGL/lib ;

		local OPENGL_LIBS =
			OpenGL32.lib
			glu32.lib
			;

		C.LinkPrebuiltLibraries $(TARGET) : $(OPENGL_LIBS) ;
	}

    if ( macosx64 in $(PLATFORM) )
    {
        C.macosx.LinkFrameworks $(TARGET) : OpenGL ;
    }

	if ( linux64 in $(PLATFORM) )
	{
		local OPENGL_LIBS =
			GL
			GLU
			;

		C.LinkPrebuiltLibraries $(TARGET) : $(OPENGL_LIBS) ;
	}

	if ( dreamcast in $(PLATFORM) )
	{
		C.Defines $(TARGET) : ION_RENDERER_KGL ;

		local OPENGL_LIBS =
			libgl.a
			;

		C.LinkPrebuiltLibraries $(TARGET) : $(OPENGL_LIBS) ;
	}
}

rule ApplyOpenALSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/OpenAL/include ;
	C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/OpenAL/lib/Win32 ;

	local OPENAL_LIBS =
		OpenAL32.lib
		;

	C.LinkPrebuiltLibraries $(TARGET) : $(OPENAL_LIBS) ;
}

rule ApplyGlewSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/glew/include ;
	C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/glew/lib ;

	C.Defines $(TARGET) : ION_RENDER_SUPPORTS_GLEW ;

	local GLEW_LIBS =
		glew32.lib
		glew32s.lib
		;

	C.LinkPrebuiltLibraries $(TARGET) : $(GLEW_LIBS) ;
}

rule ApplyGlutSDK TARGET
{
	C.Defines $(TARGET) : ION_RENDER_SUPPORTS_GLUT ;

    if ( macosx64 in $(PLATFORM) )
    {
        C.macosx.LinkFrameworks $(TARGET) : OpenGL GLUT ;
    }
}

rule ApplyGlfwSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/glfw/include ;
	C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/glfw/lib ;

	C.Defines $(TARGET) : ION_RENDER_SUPPORTS_GLFW ;

	local GLFW_LIBS =
		#glfw3.lib
		glfw3dll.lib
		;

	C.LinkPrebuiltLibraries $(TARGET) : $(GLFW_LIBS) ;
}

rule ApplySDLSDK TARGET
{
	C.Defines $(TARGET) : ION_RENDER_SUPPORTS_SDL ;

	if ( win32 in $(PLATFORM) )
	{
		C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/SDL/include ;
		C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/SDL/include/SDL ;
		C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/SDL/lib ;

		local SDL_LIBS =
			SDL2main_d.lib
			SDL2_d.lib
			SDL2_image_d.lib
			;


		C.LinkFlags $(TARGET) :
			/DelayLoad:SDL2.dll
			/DelayLoad:SDL2main.dll
			;

		C.LinkPrebuiltLibraries $(TARGET) : $(SDL_LIBS) ;
	}

    if ( macosx64 in $(PLATFORM) )
    {
        C.IncludeDirectories $(TARGET) : /Library/Frameworks/SDL2.framework/Headers ;
        C.macosx.FrameworkDirectories $(TARGET) : /Library/Frameworks ;
        C.macosx.LinkFrameworks $(TARGET) : SDL2 ;
    }

    if ( linux64 in $(PLATFORM) )
	{
		local SDL_LIBS =
			SDL2
			;

		C.LinkPrebuiltLibraries $(TARGET) : $(SDL_LIBS) ;
	}

	if ( dreamcast in $(PLATFORM) )
	{
		local SDL_LIBS =
			libSDL.a
			;

		C.LinkPrebuiltLibraries $(TARGET) : $(SDL_LIBS) ;
	}
}

rule ApplySDLImageSDK TARGET
{
	C.Defines $(TARGET) : ION_RENDER_SUPPORTS_SDLIMAGE ;

	if ( win32 in $(PLATFORM) )
	{
		C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/SDLImage/include ;

		local SDL_LIBS =
			SDL2_image_d.lib
			;


		C.LinkFlags $(TARGET) :
			/DelayLoad:SDL2_image.dll
			;

		C.LinkPrebuiltLibraries $(TARGET) : $(SDL_LIBS) ;
	}
}

rule ApplyCgSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/Cg/include ;
	C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/Cg/lib ;

	C.Defines $(TARGET) : ION_RENDER_SUPPORTS_CGGL ;

	local CG_LIBS =
		cg.lib
		cgGL.lib
		;

	C.LinkFlags $(TARGET) :
		/DelayLoad:cg.dll
		/DelayLoad:cgGL.dll
		;

	C.LinkPrebuiltLibraries $(TARGET) : $(CG_LIBS) ;
}

rule ApplyTinyXMLSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/TinyXML/include ;

    ApplyIonCompiler tinyxml ;
    ApplyIonDefines tinyxml ;
    ApplyIonIncludes tinyxml ;

	C.RuntimeType tinyxml : static ;

	C.Library tinyxml :
		$(bigevilcorp)/ion/dependencies/TinyXML/include/TinyXML/tinyxml2.h
		$(bigevilcorp)/ion/dependencies/TinyXML/src/tinyxml2.cpp
		;

	C.LinkLibraries $(TARGET) : tinyxml ;
}

rule ApplyBulletSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/Dependencies/Bullet/include ;
	C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/Dependencies/Bullet/lib ;

	BULLET_LIBS_DEBUG =
		BulletCollision_debug.lib
		BulletDynamics_debug.lib
		LinearMath_debug.lib
		;

	BULLET_LIBS_RELEASE =
		BulletCollision.lib
		BulletDynamics.lib
		LinearMath.lib
		;

	if ( debug in $(CONFIG) )
	{
		C.LinkPrebuiltLibraries $(TARGET) : $(BULLET_LIBS_DEBUG) : debug ;
	}

	if ( release in $(CONFIG) )
	{
		C.LinkPrebuiltLibraries $(TARGET) : $(BULLET_LIBS_RELEASE) : release ;
	}
}

rule ApplyFreeTypeSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/freetype/include ;
	C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/freetype/lib/vc120/Win32 ;

	FT_LIBS_DEBUG =
		freetype27MT.lib
		;

	FT_LIBS_RELEASE =
		freetype27d.lib
		;

	if ( debug in $(CONFIG) )
	{
		C.LinkPrebuiltLibraries $(TARGET) : $(FT_LIBS_DEBUG) ;
	}

	if ( release in $(CONFIG) )
	{
		C.LinkPrebuiltLibraries $(TARGET) : $(FT_LIBS_RELEASE) ;
	}
}

rule ApplyFreeTypeSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/freetype/include ;
	C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/freetype/lib/vc120/Win32 ;

	FT_LIBS_DEBUG =
		freetype27MT.lib
		;

	FT_LIBS_RELEASE =
		freetype27d.lib
		;

	if ( debug in $(CONFIG) )
	{
		C.LinkPrebuiltLibraries $(TARGET) : $(FT_LIBS_DEBUG) ;
	}

	if ( release in $(CONFIG) )
	{
		C.LinkPrebuiltLibraries $(TARGET) : $(FT_LIBS_RELEASE) ;
	}
}

rule ApplyWxSDK TARGET
{
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/wx/include ;
	C.IncludeDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/wx/include/wx ;
	C.LinkDirectories $(TARGET) : $(bigevilcorp)/ion/dependencies/wx/lib/vc120 ;

	C.Defines $(TARGET) : WXUSINGDLL wxMSVC_VERSION_AUTO UNICODE _UNICODE ;

	WX_LIBS_DEBUG =
		wxbase30ud.lib
		wxbase30ud_net.lib
		wxbase30ud_xml.lib
		wxmsw30ud_adv.lib
		wxmsw30ud_aui.lib
		wxmsw30ud_core.lib
		wxmsw30ud_gl.lib
		wxmsw30ud_html.lib
		wxmsw30ud_media.lib
		wxmsw30ud_propgrid.lib
		wxmsw30ud_qa.lib
		wxmsw30ud_ribbon.lib
		wxmsw30ud_richtext.lib
		wxmsw30ud_stc.lib
		wxmsw30ud_webview.lib
		wxmsw30ud_xrc.lib
		wxexpatd.lib
		wxjpegd.lib
		wxpngd.lib
		wxregexud.lib
		wxscintillad.lib
		wxtiffd.lib
		wxzlibd.lib
		;

	WX_LIBS_RELEASE =
		wxbase30u.lib
		wxbase30u_net.lib
		wxbase30u_xml.lib
		wxmsw30u_adv.lib
		wxmsw30u_aui.lib
		wxmsw30u_core.lib
		wxmsw30u_gl.lib
		wxmsw30u_html.lib
		wxmsw30u_media.lib
		wxmsw30u_propgrid.lib
		wxmsw30u_qa.lib
		wxmsw30u_ribbon.lib
		wxmsw30u_richtext.lib
		wxmsw30u_stc.lib
		wxmsw30u_webview.lib
		wxmsw30u_xrc.lib
		wxexpat.lib
		wxjpeg.lib
		wxpng.lib
		wxregexu.lib
		wxscintilla.lib
		wxtiff.lib
		wxzlib.lib
		;

	if ( debug in $(CONFIG) )
	{
		C.LinkPrebuiltLibraries $(TARGET) : $(WX_LIBS_DEBUG) ;
	}

	if ( release in $(CONFIG) )
	{
		C.LinkPrebuiltLibraries $(TARGET) : $(WX_LIBS_RELEASE) ;
	}
}

rule ApplyKOSSDK TARGET
{
	C.IncludeDirectories $(TARGET) : C:/msys32/opt/toolchains/dc/kos/include ;
}

#################################################
## Compiler options
#################################################
rule ShowIncludes TARGET
{
	C.C++Flags $(TARGET) : /showIncludes ;
}
