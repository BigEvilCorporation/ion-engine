rule C.Toolchain.raspberrypi.*
{
	C.ToolchainSpecKeys C.PLATFORM/PLATFORM C.CONFIG/CONFIG ;

	# Detect toolchain
	COMPILER = [ C.Toolchain.raspi.raspberrypi.Detect ] ;

	local SUFOBJ = .o ;
	SUFEXE on $(C.COMPILER_SUITE_SYMBOL) = "" ;
	SUFLIB on $(C.COMPILER_SUITE_SYMBOL) = .a ;
	SUFMODULE on $(C.COMPILER_SUITE_SYMBOL) = .so ;
	SUFLINKLIBS on $(C.COMPILER_SUITE_SYMBOL) = .a .so ;
	SUFOBJ on $(C.COMPILER_SUITE_SYMBOL) = $(SUFOBJ) ;
	SUFSHAREDLIB on $(C.COMPILER_SUITE_SYMBOL) = .so ;

	NOARSCAN on $(C.COMPILER_SUITE_SYMBOL) = true ;
	NOARUPDATE on $(C.COMPILER_SUITE_SYMBOL) = true ;

	C.BUILD_EXTENSIONS on $(C.COMPILER_SUITE_SYMBOL) = $(SUFOBJ) ;
	C.AddBuildExtensions CC : .c .s : C.raspi.CC : $(SUFOBJ) "" : 1 1 0 : 1 ;
	C.AddBuildExtensions C++ : .cc .cpp .cxx : C.raspi.C++ : $(SUFOBJ) "" : 1 0 1 : 1 ;
	C.AddBuildExtensions M : .m : C.raspi.CC : $(SUFOBJ) "" : 1 1 0 : 1 ;
	C.AddBuildExtensions MM : .mm : C.raspi.C++ : $(SUFOBJ) "" : 1 0 1 : 1 ;
	C.AddBuildExtensions PCH : .h .pch : C.raspi.PCH : "" .gch ;

	PCHCCFLAGS on $(C.COMPILER_SUITE_SYMBOL) = -x c-header ;
	PCHC++FLAGS on $(C.COMPILER_SUITE_SYMBOL) = -x c++-header ;
	PCHMFLAGS on $(C.COMPILER_SUITE_SYMBOL) = -x objective-c-header ;
	PCHMMFLAGS on $(C.COMPILER_SUITE_SYMBOL) = -x objective-c++-header ;

	STDHDRS on $(C.COMPILER_SUITE_SYMBOL) = $(RASPI_TOOLCHAIN_PATH)/lib/gcc/arm-linux-gnueabihf/4.9/include ;

	C.IncludeDirectories * :
		$(RASPI_TOOLCHAIN_PATH)/include
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/include
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/include/c++/4.9
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/sysroot/opt/vc/include
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/sysroot/opt/vc/include/interface/vcos/pthreads
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/sysroot/opt/vc/include/interface/vmcs_host/linux
		;

	C.LinkDirectories * :
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/sysroot/opt/vc/lib
		$(RASPI_TOOLCHAIN_PATH)/lib
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/lib
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/sysroot/lib
		$(RASPI_TOOLCHAIN_PATH)/arm-linux-gnueabihf/sysroot/usr/lib
		;

	C.LinkPrebuiltLibraries * :
		#libffi.so.6
		;

	C.Flags * : CC	: -x c ;
	C.Flags * : C++	: -x c++ -std=c++11 ;
	C.LibFlags * : ru ;
	C.LinkFlags * :
		-pthread
		-lc
		-ldl
		-lm
		-lasound
		-lX11
		-lXext
		-lXau
		-lXi
		-lXcb
		-lXdmcp
		-lxcursor
		-lXfixes
		-lXinerama
		-lXrandr
		-lXrender
		-lXss
		-lXxf86vm
		-lxkbcommon
		-lbcm_host
		-lGLESv1_CM
		-lEGL
		;
	
	C.Defines * : ;

	local COMPILER_BIN_PATH = $(COMPILER_BIN_PATH:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.CC on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/arm-linux-gnueabihf-gcc.exe ;
	C.C++ on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/arm-linux-gnueabihf-g++.exe ;
	C.AR on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/arm-linux-gnueabihf-ar.exe ;
	C.LINK on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/arm-linux-gnueabihf-g++.exe ;
	C.RANLIB on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/arm-linux-gnueabihf-ranlib.exe ;

	return $(COMPILER) ;
}

if ! $(TARGETINFO_LOCATE)
{
	rule C.raspi.FDefines { return -D$(<) ; }
	rule C.raspi.FIncludes { return -I$(<) ; }
	rule C.raspi.FLibraryPaths { return -L$(<) ; }
}

actions updated response C.raspi.CC
{
	PATH=$(C.CC:D);%PATH%
    $(C.CC:C) -c $(MFLAGS) $(>:C)
}

actions updated response C.raspi.C++
{
	PATH=$(C.C++:D);%PATH%
    $(C.C++:C) -c $(MFLAGS) $(>:C)
}

actions updated response C.raspi.PCH
{
	PATH=$(C.C++:D);%PATH%
    $(C.C++:C) -c $(MFLAGS) $(>:C)
}

actions C.raspi.Archive
{
	PATH=$(C.AR:D);%PATH%
    $(C.AR:C) $(LIBFLAGS) $(<:C) $(>:C)
}

actions C.raspi.Link
{
	PATH=$(C.LINK:D);%PATH%
    $(C.LINK:C) -o $(<[1]:C) $(>:C) $(NEEDLIBS:TC) $(NEEDLIBS:TC) -Wl,--start-group $(LINKLIBS:TC) -Wl,--end-group $(LINKFLAGS)
}

actions together C.raspi.Ranlib
{
	PATH=$(C.RANLIB:D);%PATH%
    $(C.RANLIB:C) $(<:C)
}

rule C.raspi._MultiCppCompile_SetupFlags
{
	if $(_pch[1])  &&  ! $(_nopch) {
		_flags += -Winvalid-pch ;

		local md5 = [ MD5 $(_flags) ] ;
		local _pchName = @($(_pch[3]:LBS):G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)-$(md5)) ;
		BINDING on $(_pchName) = $(_pch[3]) ;
		local _pchFilename = $(_pchName).gch ;

		if ! $(built-$(_pchName)) {
			built-$(_pchName) = 1 ;

			local pchext = $(_pchName:S) ;
			local pchBUILD_EXT = C.BUILD$(pchext) ;

			MakeLocate $(_pchFilename) : $(LOCATE_TARGET)/$(_pchName:S=:G=)-$(md5) ;

			newsrcs += $(_pchName) ;

			PCHFLAGS on $(_pchFilename) += $($($(pchBUILD_EXT).PCHFLAGS)) ;
			MFLAGS on $(_pchName) = $($(pchBUILD_EXT).RULE) $($(pchBUILD_EXT).SUFOBJ) $($(pchBUILD_EXT).ADD_TO_LINK) $(_flags[5-]) $($($(BUILD_EXT).PCHFLAGS)) -o \"$(_pchFilename:T)\" ;

			Depends $(_pchFilename) : $(_pchName) ;
			SEARCH on $(_pchName) = $(_hdrs) ;

			# source needs to be scanned for header dependencies
			HDRRULE on $(_pchName) = C.HdrRule ;
			HDRSCAN on $(_pchName) = $(C.HDRPATTERN) ;
			HDRGRIST on $(_pchName) = $(C.ACTIVE_TOOLCHAIN_TARGET_GRIST) ;
			HDRSEARCH on $(_pchName) = $(_hdrs) ;
		}

		_flags += -include $(_pchFilename:T:S=:C) ;

		HDREXTRA on $(_src) += $(_pchName:T) ;

		# if the source should use pch
		if $(_pch[2]) {
			# mark that compilation will depend on it
			Includes $(_src) : $(_pchFilename) ;
		}

		if $(_pch[3]) {
			Depends $(_obj) : $(_pchFilename) ;
		}
	}

	if $(objectForceIncludes[1]) {
		SEARCH on $(objectForceIncludes) = $(_hdrs) ;
		_flags += "-include $(objectForceIncludes:G=)" ;
	}

	_flags += "-o \"$(_obj:T)\"" ;

	if $(C_LIBRARY_SHARED_MODULE) {
		_flags += -fPIC ;
	}
}
